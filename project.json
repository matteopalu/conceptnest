{"name":"Conceptnest","components":[{"name":"/App","graph":{"connections":[],"roots":[{"id":"246f9453-a119-ac78-171e-3806cf596ecc","type":"Group","x":-111.4681915301291,"y":311.4376377651178,"parameters":{"backgroundColor":"#FFFFFF","minHeight":{"value":100,"unit":"vh"}},"ports":[],"dynamicports":[],"children":[{"id":"a24a02ae-c1b8-1250-72c3-a1d48cbc9558","type":"Router","parameters":{"name":"Main","pages":{"routes":["/Start Page","/Select levels"],"startPage":"/Start Page"}},"ports":[],"dynamicports":[],"children":[]}]}],"visualRoots":["246f9453-a119-ac78-171e-3806cf596ecc"]},"metadata":{"canvasSize":{"width":"1039px","height":"751px"},"canvasPos":{"x":0,"y":0}}},{"name":"/Index","id":"63d7dba4-78c0-4570-4930-8eabfa28b887","graph":{"connections":[{"fromId":"86b3cb2d-7504-a681-7083-9b8fea55de5f","fromProperty":"out-AccordionString","toId":"0d26b428-5c71-8b0e-35aa-ae42a6848574","toProperty":"html"},{"fromId":"dd7ecc3b-677c-cc55-1dc2-a2edb727585d","fromProperty":"InputString","toId":"86b3cb2d-7504-a681-7083-9b8fea55de5f","toProperty":"in-InputString"},{"fromId":"dd7ecc3b-677c-cc55-1dc2-a2edb727585d","fromProperty":"RunIndex","toId":"86b3cb2d-7504-a681-7083-9b8fea55de5f","toProperty":"run"},{"fromId":"dd7ecc3b-677c-cc55-1dc2-a2edb727585d","fromProperty":"mount","toId":"3cf685cd-b773-c386-ad7b-c8c2e760cefe","toProperty":"mounted"}],"roots":[{"id":"86b3cb2d-7504-a681-7083-9b8fea55de5f","type":"JavaScriptFunction","label":"no content","x":623.1863454745921,"y":378.37413612916225,"parameters":{"functionScript":"// Get the input string\r\nconst inputString = Inputs.InputString || '';\r\n\r\n// Define a function to convert the string into nested accordions\r\nfunction convertToAccordion(input) {\r\n    // Initialize an empty string to store the result\r\n    let result = '';\r\n\r\n    // Use a regular expression to match the tags and their content\r\n    let regex = /<level(\\d+)><title>(.*?)<\\/title>(.*?)<\\/level\\1>/g;\r\n\r\n    // Initialize a variable to keep track of the current level\r\n    let currentLevel = 0;\r\n\r\n    // Initialize a variable to keep track of the last match\r\n    let lastMatch = null;\r\n\r\n    // Iterate over the matches\r\n    let match;\r\n    while ((match = regex.exec(input)) !== null) {\r\n        // If there was a previous match, add it to the result\r\n        if (lastMatch !== null) {\r\n            // Get the level and the content from the last match\r\n            let level = parseInt(lastMatch[1]);\r\n            let title = lastMatch[2];\r\n            let content = lastMatch[3];\r\n\r\n            // If the level is 1, start a new accordion\r\n            if (level === 1) {\r\n                if (result !== '') {\r\n                    // Close the previous accordion\r\n                    result += '</div>';\r\n                }\r\n                // Separate the accordion class from the level1 class\r\n                result += `<div class=\"accordion\"><div class=\"index1\"><div class=\"title\">${title}</div></div>`;\r\n            }\r\n\r\n            // If the level is greater than 1, create a nested accordion inside the previous level\r\n            if (level > 1) {\r\n                // If the next level is the same or lower, don't add the \"click\" class\r\n                if (parseInt(match[1]) <= level) {\r\n                    result += `<div class=\"index${level}\"><div class=\"title\">${title}</div></div>`;\r\n                } else {\r\n                    result += `<div class=\"index${level}\"><div class=\"title\">${title}</div></div>`;\r\n                }\r\n            }\r\n\r\n            // If the level is less than or equal to the current level, close the accordion\r\n            if (level <= currentLevel) {\r\n                result += '';\r\n            }\r\n\r\n            // Update the current level\r\n            currentLevel = level;\r\n        }\r\n\r\n        // Update the last match\r\n        lastMatch = match;\r\n    }\r\n\r\n    // If there was a last match, add it to the result without the \"click\" class\r\n    if (lastMatch !== null) {\r\n        // Get the level and the content from the last match\r\n        let level = parseInt(lastMatch[1]);\r\n        let title = lastMatch[2];\r\n        let content = lastMatch[3];\r\n\r\n        // Add the last match to the result without the \"click\" class\r\n        result += `<div class=\"index${level}\"><div class=\"title\">${title}</div></div>`;\r\n    }\r\n\r\n    // Close the last accordion if it's not closed\r\n    if (result !== '') {\r\n        result += '</div>';\r\n    }\r\n\r\n    // Return the result\r\n    return result;\r\n}\r\n\r\n// Convert the input string into nested accordions\r\nlet accordionString = convertToAccordion(inputString);\r\n\r\n// Output the result\r\nOutputs.AccordionString = accordionString;\r\n\r\n// Signal success\r\nOutputs.Success();"},"ports":[],"dynamicports":[{"name":"in-InputString","displayName":"InputString","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-AccordionString","displayName":"AccordionString","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"merge":{"soureCodePorts":["functionScript"]}}},{"id":"3cf685cd-b773-c386-ad7b-c8c2e760cefe","type":"Group","x":42.021951030184255,"y":88.11291100085342,"parameters":{},"ports":[],"dynamicports":[],"children":[{"id":"aced1ec7-e5a3-3e5d-b17b-c62ff373a9c7","type":"Group","parameters":{"paddingLeft":{"value":20,"unit":"px"},"paddingTop":{"value":20,"unit":"px"},"paddingRight":{"value":20,"unit":"px"},"paddingBottom":{"value":40,"unit":"px"},"alignX":"center"},"ports":[],"dynamicports":[],"children":[{"id":"5f57f1c3-c52b-ea10-874a-6eaf4e13e1dd","type":"Group","parameters":{"sizeMode":"contentHeight","alignX":"center","alignY":"top","width":{"value":80,"unit":"%"}},"ports":[],"dynamicports":[],"children":[{"id":"0d26b428-5c71-8b0e-35aa-ae42a6848574","type":"module.inlineHtml","parameters":{"runJs":false,"mounted":true},"ports":[],"dynamicports":[],"children":[]}]}]}]},{"id":"dd7ecc3b-677c-cc55-1dc2-a2edb727585d","type":"Component Inputs","x":304.16535980890404,"y":357.6442535706929,"parameters":{},"ports":[{"name":"InputString","plug":"output","type":{"name":"*"},"index":1},{"name":"RunIndex","plug":"output","type":{"name":"*"},"index":2},{"name":"mount","plug":"output","type":{"name":"*"},"index":3}],"dynamicports":[],"children":[]}],"visualRoots":["3cf685cd-b773-c386-ad7b-c8c2e760cefe"]}},{"name":"/Select concepts","id":"ec01f9f2-7a0c-5038-8da4-0a303adecd58","graph":{"connections":[{"fromId":"d7b1abc0-7e2f-9820-4f65-9f6e722c15af","fromProperty":"onClick","toId":"1be436e5-af26-9be8-d722-78217e925929","toProperty":"open"},{"fromId":"1be436e5-af26-9be8-d722-78217e925929","fromProperty":"success","toId":"6807362d-3ebc-9e64-535c-8332b8a37ded","toProperty":"run"},{"fromId":"1be436e5-af26-9be8-d722-78217e925929","fromProperty":"file","toId":"6807362d-3ebc-9e64-535c-8332b8a37ded","toProperty":"in-File"},{"fromId":"6807362d-3ebc-9e64-535c-8332b8a37ded","fromProperty":"out-Success","toId":"dd9ab8c9-8bc4-846c-5d9c-3ea5b1162119","toProperty":"run"},{"fromId":"6807362d-3ebc-9e64-535c-8332b8a37ded","fromProperty":"out-Text","toId":"dd9ab8c9-8bc4-846c-5d9c-3ea5b1162119","toProperty":"in-InputString"},{"fromId":"6807362d-3ebc-9e64-535c-8332b8a37ded","fromProperty":"out-Success","toId":"ac470bf0-88c9-d82c-7436-f84972a77283","toProperty":"run"},{"fromId":"6807362d-3ebc-9e64-535c-8332b8a37ded","fromProperty":"out-Text","toId":"ac470bf0-88c9-d82c-7436-f84972a77283","toProperty":"in-InputString"},{"fromId":"ac470bf0-88c9-d82c-7436-f84972a77283","fromProperty":"out-AccordionString","toId":"9e9bc747-9d1d-5b32-311f-0fa6e59c6007","toProperty":"html"},{"fromId":"dd9ab8c9-8bc4-846c-5d9c-3ea5b1162119","fromProperty":"out-AccordionString","toId":"a815dae0-a114-2265-9317-fb78470fc68e","toProperty":"in-ContentHTML"},{"fromId":"a815dae0-a114-2265-9317-fb78470fc68e","fromProperty":"out-ExtractedContent","toId":"5802e91c-c6f2-b10b-6d82-63dd118a13dd","toProperty":"value"},{"fromId":"dd9ab8c9-8bc4-846c-5d9c-3ea5b1162119","fromProperty":"out-Success","toId":"61b0e68c-6978-f51c-f740-b967f3be8d23","toProperty":"to-mounted"},{"fromId":"61b0e68c-6978-f51c-f740-b967f3be8d23","fromProperty":"mount","toId":"9e9bc747-9d1d-5b32-311f-0fa6e59c6007","toProperty":"mounted"},{"fromId":"b76910f4-c567-8db4-7655-619988921456","fromProperty":"timerFinished","toId":"a815dae0-a114-2265-9317-fb78470fc68e","toProperty":"run"},{"fromId":"9e9bc747-9d1d-5b32-311f-0fa6e59c6007","fromProperty":"didMount","toId":"b76910f4-c567-8db4-7655-619988921456","toProperty":"start"},{"fromId":"5802e91c-c6f2-b10b-6d82-63dd118a13dd","fromProperty":"savedValue","toId":"de3b883c-151c-cd98-b86e-935614374531","toProperty":"SelectedText"}],"roots":[{"id":"1be436e5-af26-9be8-d722-78217e925929","type":"Open File Picker","x":302,"y":202,"parameters":{},"ports":[],"dynamicports":[],"children":[]},{"id":"6807362d-3ebc-9e64-535c-8332b8a37ded","type":"JavaScriptFunction","label":"Text File to String","x":607,"y":136,"parameters":{"functionScript":"// Get the file from the inputs\nconst file = Inputs.File;\n\n// Check if the file is not null\nif (!file) throw new Error('No file provided');\n\n// Create a new FileReader instance\nconst reader = new FileReader();\n\n// Read the file as text\nreader.readAsText(file);\n\n// When the file is loaded\nreader.onload = function() {\n  // Output the file content as a string\n  Outputs.Text = reader.result;\n  Outputs.Success();\n};\n\n// If there is an error while reading the file\nreader.onerror = function() {\n  Outputs.error = reader.error;\n  Outputs.Failure();\n};\n"},"ports":[],"dynamicports":[{"name":"in-File","displayName":"File","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":6},{"name":"out-Text","displayName":"Text","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-error","displayName":"error","plug":"output","type":"*","group":"Outputs","index":8}],"children":[],"metadata":{"prompt":{"history":[{"content":"read a text from a txt file uploaded from the user and convert it to a string","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"// Get the file from the inputs\nconst file = Inputs.File;\n\n// Check if the file is not null\nif (!file) throw new Error('No file provided');\n\n// Create a new FileReader instance\nconst reader = new FileReader();\n\n// Read the file as text\nreader.readAsText(file);\n\n// When the file is loaded\nreader.onload = function() {\n  // Output the file content as a string\n  Outputs.Text = reader.result;\n  Outputs.Success();\n};\n\n// If there is an error while reading the file\nreader.onerror = function() {\n  Outputs.error = reader.error;\n  Outputs.Failure();\n};\n"},"snowflakeId":"018b7ff42151-5o2lyg","type":"user"},{"type":"assistant","content":"\nThis function reads a text file uploaded by the user and converts it to a string. It takes a file from the <span style=\"color: var(--base-color-yellow-400);\">Inputs.File</span> input, checks if the file is not null, and then uses the FileReader API to read the content of the file as text. \n\nWhen the file is successfully loaded, the content of the file is outputted as a string through the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Text</span> output and the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Success</span> signal is triggered.\n\nIf there is an error while reading the file, the error is outputted through the <span style=\"color: var(--base-color-yellow-400);\">Outputs.error</span> output and the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Failure</span> signal is triggered.\n","snowflakeId":"018b7ff46299-ybuzu7","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"dd9ab8c9-8bc4-846c-5d9c-3ea5b1162119","type":"JavaScriptFunction","x":858,"y":413,"parameters":{"functionScript":"// Get the input string\r\nconst inputString = Inputs.InputString || '';\r\n\r\n// Define a function to convert the string into nested accordions\r\nfunction convertToAccordion(input) {\r\n    // Initialize an empty string to store the result\r\n    let result = '';\r\n\r\n    // Use a regular expression to match the tags and their content\r\n    let regex = /<level(\\d+)><title>(.*?)<\\/title>(.*?)<\\/level\\1>/g;\r\n\r\n    // Initialize a variable to keep track of the current level\r\n    let currentLevel = 0;\r\n\r\n    // Initialize a variable to keep track of the last match\r\n    let lastMatch = null;\r\n\r\n    // Iterate over the matches\r\n    let match;\r\n    while ((match = regex.exec(input)) !== null) {\r\n        // If there was a previous match, add it to the result\r\n        if (lastMatch !== null) {\r\n            // Get the level and the content from the last match\r\n            let level = parseInt(lastMatch[1]);\r\n            let title = lastMatch[2];\r\n            let content = lastMatch[3];\r\n\r\n            // If the level is 1, start a new accordion\r\n            if (level === 1) {\r\n                if (result !== '') {\r\n                    // Close the previous accordion\r\n                    result += '</div>';\r\n                }\r\n                // Separate the accordion class from the level1 class\r\n                result += `<div class=\"accordion\"><div class=\"level1\"><div class=\"title\">${title}</div>${content}</div>`;\r\n            }\r\n\r\n            // If the level is greater than 1, create a nested accordion inside the previous level\r\n            if (level > 1) {\r\n                // If the next level is the same or lower, don't add the \"click\" class\r\n                if (parseInt(match[1]) <= level) {\r\n                    result += `<div class=\"level${level}\"><div class=\"title\">${title}</div>${content}</div>`;\r\n                } else {\r\n                    result += `<div class=\"level${level}\"><div class=\"title\">${title}</div>${content}</div>`;\r\n                }\r\n            }\r\n\r\n            // If the level is less than or equal to the current level, close the accordion\r\n            if (level <= currentLevel) {\r\n                result += '';\r\n            }\r\n\r\n            // Update the current level\r\n            currentLevel = level;\r\n        }\r\n\r\n        // Update the last match\r\n        lastMatch = match;\r\n    }\r\n\r\n    // If there was a last match, add it to the result without the \"click\" class\r\n    if (lastMatch !== null) {\r\n        // Get the level and the content from the last match\r\n        let level = parseInt(lastMatch[1]);\r\n        let title = lastMatch[2];\r\n        let content = lastMatch[3];\r\n\r\n        // Add the last match to the result without the \"click\" class\r\n        result += `<div class=\"level${level}\"><div class=\"title\">${title}</div>${content}</div>`;\r\n    }\r\n\r\n    // Close the last accordion if it's not closed\r\n    if (result !== '') {\r\n        result += '</div>';\r\n    }\r\n\r\n    // Return the result\r\n    return result;\r\n}\r\n\r\n// Convert the input string into nested accordions\r\nlet accordionString = convertToAccordion(inputString);\r\n\r\n// Output the result\r\nOutputs.AccordionString = accordionString;\r\n\r\n// Signal success\r\nOutputs.Success();"},"ports":[],"dynamicports":[{"name":"in-InputString","displayName":"InputString","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-AccordionString","displayName":"AccordionString","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"merge":{"soureCodePorts":["functionScript"]}}},{"id":"ac470bf0-88c9-d82c-7436-f84972a77283","type":"JavaScriptFunction","label":"no content","x":861,"y":254,"parameters":{"functionScript":"// Get the input string\r\nconst inputString = Inputs.InputString || '';\r\n\r\n// Define a function to convert the string into nested accordions\r\nfunction convertToAccordion(input) {\r\n    // Initialize an empty string to store the result\r\n    let result = '';\r\n\r\n    // Use a regular expression to match the tags and their content\r\n    let regex = /<level(\\d+)><title>(.*?)<\\/title>(.*?)<\\/level\\1>/g;\r\n\r\n    // Initialize a variable to keep track of the current level\r\n    let currentLevel = 0;\r\n\r\n    // Initialize a variable to keep track of the last match\r\n    let lastMatch = null;\r\n\r\n    // Iterate over the matches\r\n    let match;\r\n    while ((match = regex.exec(input)) !== null) {\r\n        // If there was a previous match, add it to the result\r\n        if (lastMatch !== null) {\r\n            // Get the level and the content from the last match\r\n            let level = parseInt(lastMatch[1]);\r\n            let title = lastMatch[2];\r\n            let content = lastMatch[3];\r\n\r\n            // If the level is 1, start a new accordion\r\n            if (level === 1) {\r\n                if (result !== '') {\r\n                    // Close the previous accordion\r\n                    result += '</div>';\r\n                }\r\n                // Separate the accordion class from the level1 class\r\n                result += `<div class=\"accordion\"><div class=\"level1\"><div class=\"title\">${title}</div></div>`;\r\n            }\r\n\r\n            // If the level is greater than 1, create a nested accordion inside the previous level\r\n            if (level > 1) {\r\n                // If the next level is the same or lower, don't add the \"click\" class\r\n                if (parseInt(match[1]) <= level) {\r\n                    result += `<div class=\"level${level}\"><div class=\"title\">${title}</div></div>`;\r\n                } else {\r\n                    result += `<div class=\"level${level}\"><div class=\"title\">${title}</div></div>`;\r\n                }\r\n            }\r\n\r\n            // If the level is less than or equal to the current level, close the accordion\r\n            if (level <= currentLevel) {\r\n                result += '';\r\n            }\r\n\r\n            // Update the current level\r\n            currentLevel = level;\r\n        }\r\n\r\n        // Update the last match\r\n        lastMatch = match;\r\n    }\r\n\r\n    // If there was a last match, add it to the result without the \"click\" class\r\n    if (lastMatch !== null) {\r\n        // Get the level and the content from the last match\r\n        let level = parseInt(lastMatch[1]);\r\n        let title = lastMatch[2];\r\n        let content = lastMatch[3];\r\n\r\n        // Add the last match to the result without the \"click\" class\r\n        result += `<div class=\"level${level}\"><div class=\"title\">${title}</div></div>`;\r\n    }\r\n\r\n    // Close the last accordion if it's not closed\r\n    if (result !== '') {\r\n        result += '</div>';\r\n    }\r\n\r\n    // Return the result\r\n    return result;\r\n}\r\n\r\n// Convert the input string into nested accordions\r\nlet accordionString = convertToAccordion(inputString);\r\n\r\n// Output the result\r\nOutputs.AccordionString = accordionString;\r\n\r\n// Signal success\r\nOutputs.Success();"},"ports":[],"dynamicports":[{"name":"in-InputString","displayName":"InputString","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-AccordionString","displayName":"AccordionString","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"merge":{"soureCodePorts":["functionScript"]}}},{"id":"a815dae0-a114-2265-9317-fb78470fc68e","type":"JavaScriptFunction","x":600,"y":445,"parameters":{"functionScript":"// The HTML string\r\nconst contentHTML = Inputs.ContentHTML; // Replace with your actual HTML\r\n\r\n// Parse the HTML string into a DOM object\r\nconst parser = new DOMParser();\r\nconst contentDOM = parser.parseFromString(contentHTML, 'text/html');\r\n\r\n// Define a function to extract the content\r\nfunction extractContent() {\r\n    // Initialize an array to store the extracted content\r\n    const extractedContent = [];\r\n\r\n    // Find the elements with the class 'clicked' in the current DOM\r\n    const clickedElements = document.querySelectorAll('.clicked');\r\n\r\n    // Iterate over the clicked elements\r\n    clickedElements.forEach(clickedElement => {\r\n        // Get the level from the class of the clicked element\r\n        const levelMatch = clickedElement.className.match(/level\\d+/);\r\n        if (levelMatch === null) {\r\n            console.error('Clicked element does not have a level class:', clickedElement);\r\n            return;\r\n        }\r\n        const level = levelMatch[0];\r\n\r\n        // Find all corresponding elements in the second DOM\r\n        const contentElements = Array.from(contentDOM.querySelectorAll('.' + level));\r\n\r\n        // Find the index of the clicked element among elements with the same level\r\n        const sameLevelElements = Array.from(document.querySelectorAll('.' + level));\r\n        const index = sameLevelElements.findIndex(element => element === clickedElement);\r\n\r\n        // If the index is out of bounds for the contentElements array, log an error and return\r\n        if (index < 0 || index >= contentElements.length) {\r\n            console.error('No corresponding element found in content DOM for clicked element:', clickedElement);\r\n            return;\r\n        }\r\n\r\n        // Get the corresponding content element\r\n        const contentElement = contentElements[index];\r\n\r\n        // Extract the content (excluding the title) and add it to the array\r\n        const content = contentElement.innerHTML.replace(/<div class=\"title\">.*?<\\/div>/, '');\r\n        extractedContent.push(content);\r\n    });\r\n\r\n    // Join the extracted content with two empty lines between each piece and store it in a string\r\n    const result = extractedContent.join(\"\\n\\n\");\r\n\r\n    // Log the extracted content\r\n    Outputs.ExtractedContent = result;\r\n}\r\n\r\n// Select all elements with the class 'title'\r\nconst titleElements = document.querySelectorAll('[class^=\"level\"]');\r\n\r\n// Add a click event listener to each element\r\ntitleElements.forEach(element => {\r\n    element.addEventListener('click', function() {\r\n        // Toggle the 'clicked' class on the clicked element\r\n        this.classList.toggle('clicked');\r\n\r\n        // Extract the content\r\n        extractContent();\r\n    });\r\n});"},"ports":[],"dynamicports":[{"name":"in-ContentHTML","displayName":"ContentHTML","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-ExtractedContent","displayName":"ExtractedContent","plug":"output","type":"*","group":"Outputs","index":5}],"children":[],"metadata":{"merge":{"soureCodePorts":["functionScript"]}}},{"id":"5802e91c-c6f2-b10b-6d82-63dd118a13dd","type":"String","label":"ConceptText Selected","x":830,"y":598,"parameters":{},"ports":[],"dynamicports":[],"children":[]},{"id":"61b0e68c-6978-f51c-f740-b967f3be8d23","type":"States","x":473,"y":632,"parameters":{"states":"mounted,unmounted","currentState":"unmounted","values":"mount","type-mount":"boolean","value-mounted-mount":true},"ports":[],"dynamicports":[{"type":{"name":"boolean","allowConnectionsOnly":true},"plug":"output","group":"Values","name":"mount","index":6},{"type":{"name":"enum","enums":[{"label":"Number","value":"number"},{"label":"String","value":"string"},{"label":"Boolean","value":"boolean"},{"label":"Color","value":"color"},{"label":"Text Style","value":"textStyle"}],"allowEditOnly":true},"default":"number","plug":"input","group":"Types","displayName":"mount","name":"type-mount","index":7},{"plug":"input","type":"boolean","group":"mounted Values","name":"value-mounted-mount","displayName":"mount","editorName":"mounted|mount","index":8},{"plug":"input","type":"curve","displayName":"Default","default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"mounted Transitions","name":"transitiondef-mounted","index":9},{"plug":"input","type":{"name":"signal","allowConnectionsOnly":true},"displayName":"To mounted","name":"to-mounted","group":"Go to state","index":10},{"plug":"output","type":"boolean","displayName":"At mounted","name":"at-mounted","group":"Current state","index":11},{"plug":"output","type":"signal","displayName":"Has Reached mounted","name":"reached-mounted","group":"Current state","index":12},{"plug":"input","type":"boolean","group":"unmounted Values","name":"value-unmounted-mount","displayName":"mount","editorName":"unmounted|mount","index":13},{"plug":"input","type":"curve","displayName":"Default","default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"unmounted Transitions","name":"transitiondef-unmounted","index":14},{"plug":"input","type":{"name":"signal","allowConnectionsOnly":true},"displayName":"To unmounted","name":"to-unmounted","group":"Go to state","index":15},{"plug":"output","type":"boolean","displayName":"At unmounted","name":"at-unmounted","group":"Current state","index":16},{"plug":"output","type":"signal","displayName":"Has Reached unmounted","name":"reached-unmounted","group":"Current state","index":17},{"plug":"input","type":{"name":"enum","enums":["mounted","unmounted"]},"group":"States","displayName":"State","name":"currentState","default":"mounted","index":18}],"children":[]},{"id":"b76910f4-c567-8db4-7655-619988921456","type":"Timer","x":349,"y":480,"parameters":{"duration":1000},"ports":[],"dynamicports":[],"children":[]},{"id":"af76d874-750e-711d-29f3-7bd9c454fd07","type":"Group","x":42.021951030184255,"y":88.11291100085342,"parameters":{},"ports":[],"dynamicports":[],"children":[{"id":"85ba85a7-8949-ba3f-8ad8-e76576a6fc65","type":"Group","parameters":{"flexDirection":"row","sizeMode":"contentSize","alignX":"center","columnGap":{"value":20,"unit":"px"},"marginTop":{"value":0,"unit":"px"},"flexWrap":"wrap","paddingLeft":{"value":20,"unit":"px"},"marginRight":{"value":20,"unit":"px"},"paddingTop":{"value":20,"unit":"px"},"rowGap":{"value":20,"unit":"px"}},"ports":[],"dynamicports":[],"children":[{"id":"d7b1abc0-7e2f-9820-4f65-9f6e722c15af","type":"net.noodl.controls.button","parameters":{"cssClassName":"","label":"File picker","backgroundColor":"Grey - 900"},"ports":[],"dynamicports":[],"children":[]},{"id":"310e29c2-c53a-d406-7606-83867d453649","type":"net.noodl.controls.button","parameters":{"label":"level 2","cssClassName":"view-l2"},"stateParameters":{},"stateTransitions":{},"defaultStateTransitions":{},"ports":[],"dynamicports":[],"children":[]},{"id":"58632418-ffb3-5690-da7e-741f801dace4","type":"net.noodl.controls.button","parameters":{"cssClassName":"view-l3","label":"Level 3"},"ports":[],"dynamicports":[],"children":[]},{"id":"afb07a04-8e8c-e145-2029-20e401a299e5","type":"net.noodl.controls.button","parameters":{"cssClassName":"view-l4","label":"Level 4"},"ports":[],"dynamicports":[],"children":[]}]},{"id":"22475abf-7ace-5ea6-2b65-4acb34db5ec5","type":"Group","parameters":{"paddingLeft":{"value":20,"unit":"px"},"paddingTop":{"value":40,"unit":"px"},"paddingRight":{"value":20,"unit":"px"},"paddingBottom":{"value":20,"unit":"px"},"alignX":"center"},"ports":[],"dynamicports":[],"children":[{"id":"59d0e3bc-4e24-fa7d-d911-d711cd4a6ca3","type":"Group","parameters":{"sizeMode":"contentHeight","alignX":"center","alignY":"top","width":{"value":80,"unit":"%"}},"ports":[],"dynamicports":[],"children":[{"id":"9e9bc747-9d1d-5b32-311f-0fa6e59c6007","type":"module.inlineHtml","parameters":{"runJs":false,"mounted":false},"ports":[],"dynamicports":[],"children":[]}]}]}]},{"id":"de3b883c-151c-cd98-b86e-935614374531","type":"Component Outputs","x":1013.311873298303,"y":627.746055187585,"parameters":{},"ports":[{"name":"SelectedText","plug":"input","type":{"name":"*"},"index":1}],"dynamicports":[],"children":[]}],"visualRoots":["af76d874-750e-711d-29f3-7bd9c454fd07"]}},{"name":"/Select levels","id":"a3ad42b9-e6f8-7d2d-de88-6ee84d32f5b5","graph":{"connections":[{"fromId":"861f64dc-90a1-8bfa-50f6-428e14ca501f","fromProperty":"SelectedText","toId":"46a2d01d-7f37-9efa-f7d9-796d11072b35","toProperty":"value"}],"roots":[{"id":"7b57ce1d-90e8-3c30-c290-ae73897848b0","type":"Page","x":0,"y":0,"parameters":{},"ports":[],"dynamicports":[{"name":"title","displayName":"Title","type":"string","group":"General","plug":"input","default":"Select levels","index":31},{"name":"urlPath","displayName":"Url Path","type":"string","group":"General","plug":"input","default":"select-levels","index":32}],"children":[{"id":"861f64dc-90a1-8bfa-50f6-428e14ca501f","type":"/Select concepts","parameters":{},"ports":[],"dynamicports":[],"children":[]}]},{"id":"19109c36-b8fb-ff92-1241-5a91ff5bda74","type":"PageInputs","x":-248,"y":-2,"parameters":{},"ports":[],"dynamicports":[],"children":[]},{"id":"95467bb8-c64a-5c55-17a9-9d8fc8d56c12","type":"CSS Definition","x":-9.77005199696697,"y":-70.02104777746729,"parameters":{"style":".title {\r\n    display: inline;\r\n    margin-right: 10px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.clicked {\r\n    color: blue;\r\n    cursor: pointer;\r\n}\r\n\r\n.level1,.level2,.level3,.level4,.level5 {\r\n    margin-bottom: 0px;\r\n}\r\n\r\n.level2,.level3,.level4,.level5 {\r\n    display: block;\r\n}\r\n\r\n.accordion {\r\n    padding-top: 0px;\r\n}\r\n\r\n.accordion {\r\n    padding-top:20px;\r\n}\r\n\r\n.level1 {\r\n    padding: 10px 0px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px white,  \r\n    -10px 0px 0px 0px black;\r\n}\r\n\r\n.level2 {\r\n    padding: 10px 0px;\r\n    margin-left: 9.5px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px white,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px white,  \r\n    -20px 0px 0px 0px black;\r\n}\r\n\r\n.level3 {\r\n    padding: 10px 0px;\r\n    margin-left: 19px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px white,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px white,  \r\n    -20px 0px 0px 0px black,\r\n    -28.3px 0px 0px 0px white,  \r\n    -29.5px 0px 0px 0px black;\r\n}\r\n\r\n.level4 {\r\n    padding: 10px 0px;\r\n    margin-left: 28.5px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px white,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px white,  \r\n    -20px 0px 0px 0px black,\r\n    -28.3px 0px 0px 0px white,  \r\n    -29.5px 0px 0px 0px black,\r\n    -37.6px 0px 0px 0px white,  \r\n    -38.8px 0px 0px 0px black;\r\n}\r\n\r\n.level5 {\r\n    padding: 10px 0px;\r\n    margin-left: 38px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px white,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px white,  \r\n    -20px 0px 0px 0px black,\r\n    -28.3px 0px 0px 0px white,  \r\n    -29.5px 0px 0px 0px black,\r\n    -37.6px 0px 0px 0px white,  \r\n    -38.8px 0px 0px 0px black,\r\n    -47.6px 0px 0px 0px white,  \r\n    -48.8px 0px 0px 0px black;\r\n}"},"ports":[],"dynamicports":[],"children":[],"metadata":{"merge":{"soureCodePorts":["style"]}}},{"id":"46a2d01d-7f37-9efa-f7d9-796d11072b35","type":"String","x":277.6126403527896,"y":61.05297235910621,"parameters":{},"ports":[],"dynamicports":[],"children":[]}],"visualRoots":["7b57ce1d-90e8-3c30-c290-ae73897848b0"]}},{"name":"/Start Page","id":"69559017-a17f-333b-c101-fbb0d1b4ce31","graph":{"connections":[{"fromId":"7043efdb-7117-055f-995a-d08464333dc6","fromProperty":"onClick","toId":"d02460a4-7977-f8d5-9327-03933cc775ad","toProperty":"open"},{"fromId":"e764ce0b-79a2-8a35-9ee5-3c77f2da1b01","fromProperty":"timerFinished","toId":"c9cc98a1-00c5-97f8-1d04-8cf8cf6672af","toProperty":"to-mounted"},{"fromId":"d02460a4-7977-f8d5-9327-03933cc775ad","fromProperty":"success","toId":"e764ce0b-79a2-8a35-9ee5-3c77f2da1b01","toProperty":"start"},{"fromId":"13aebcc5-f5d2-ab6b-748e-269250e0cd5a","fromProperty":"out-AccordionString","toId":"50777b46-56e2-476a-634c-351781e7ad3f","toProperty":"html"},{"fromId":"d02460a4-7977-f8d5-9327-03933cc775ad","fromProperty":"success","toId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","toProperty":"run"},{"fromId":"d02460a4-7977-f8d5-9327-03933cc775ad","fromProperty":"file","toId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","toProperty":"in-File"},{"fromId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","fromProperty":"out-Success","toId":"13aebcc5-f5d2-ab6b-748e-269250e0cd5a","toProperty":"run"},{"fromId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","fromProperty":"out-Text","toId":"13aebcc5-f5d2-ab6b-748e-269250e0cd5a","toProperty":"in-InputString"},{"fromId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","fromProperty":"out-Text","toId":"b866c672-6509-4ea2-9e40-d06339a1460a","toProperty":"InputString"},{"fromId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","fromProperty":"out-Success","toId":"b866c672-6509-4ea2-9e40-d06339a1460a","toProperty":"RunIndex"},{"fromId":"520deb71-fed0-eba9-bf01-214eefa94e94","fromProperty":"onClick","toId":"596360a1-d8a5-ee38-c1ea-b47d7102375d","toProperty":"toggle"},{"fromId":"596360a1-d8a5-ee38-c1ea-b47d7102375d","fromProperty":"icon","toId":"520deb71-fed0-eba9-bf01-214eefa94e94","toProperty":"transformRotation"},{"fromId":"596360a1-d8a5-ee38-c1ea-b47d7102375d","fromProperty":"max-height","toId":"dc7725dc-88e6-4b1b-c006-2b0e8ad897a2","toProperty":"maxHeight"},{"fromId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","fromProperty":"out-Text","toId":"bb8eb0f4-ac65-ce15-4fb5-28f9a31960f3","toProperty":"in-XmlCode"},{"fromId":"298cb7bc-8850-0ee7-fd26-13ff43a97f07","fromProperty":"result","toId":"235c3565-64bd-3cdd-6c98-8ec4fd7626ce","toProperty":"in-Number"},{"fromId":"298cb7bc-8850-0ee7-fd26-13ff43a97f07","fromProperty":"result","toId":"c9f85410-6a5b-43a8-1ce9-953d4057e53c","toProperty":"in-Number"},{"fromId":"c9f85410-6a5b-43a8-1ce9-953d4057e53c","fromProperty":"out-DecimalDigits","toId":"d5700149-6744-55d6-cc6b-f82b132b0dde","toProperty":"seconds"},{"fromId":"d5700149-6744-55d6-cc6b-f82b132b0dde","fromProperty":"result","toId":"323fe818-f336-bdc7-5055-d358b7d663b6","toProperty":"in-Number"},{"fromId":"235c3565-64bd-3cdd-6c98-8ec4fd7626ce","fromProperty":"out-Result","toId":"e28366ac-0b85-6d24-069e-876d2846d887","toProperty":"minutes"},{"fromId":"323fe818-f336-bdc7-5055-d358b7d663b6","fromProperty":"out-FirstTwoDigits","toId":"e28366ac-0b85-6d24-069e-876d2846d887","toProperty":"seconds"},{"fromId":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","fromProperty":"out-Text","toId":"d4b366bb-dc57-55b4-8c73-bf62335afe0f","toProperty":"in-XmlCode"},{"fromId":"d4b366bb-dc57-55b4-8c73-bf62335afe0f","fromProperty":"out-WordCount","toId":"298cb7bc-8850-0ee7-fd26-13ff43a97f07","toProperty":"wordcount"},{"fromId":"596360a1-d8a5-ee38-c1ea-b47d7102375d","fromProperty":"mounted","toId":"3e7e6329-578e-4395-a55c-4d00909ae8fe","toProperty":"mounted"},{"fromId":"c9cc98a1-00c5-97f8-1d04-8cf8cf6672af","fromProperty":"mount","toId":"aae113f0-098d-558a-3b32-f1bdc23a2f2d","toProperty":"mounted"}],"roots":[{"id":"a4b7e4d4-c01d-1267-30b6-c2b448b90067","type":"Page","x":0,"y":0,"parameters":{},"ports":[],"dynamicports":[{"name":"title","displayName":"Title","type":"string","group":"General","plug":"input","default":"Start Page","index":14},{"name":"urlPath","displayName":"Url Path","type":"string","group":"General","plug":"input","default":"start-page","index":15}],"children":[{"id":"12004c64-f543-f6c5-eea3-b5f60fdb5319","type":"Group","parameters":{"sizeMode":"explicit","backgroundColor":"#f8f5d7"},"ports":[],"dynamicports":[],"children":[{"id":"82e606a4-0374-cf8a-f936-0105f479e8e6","type":"Text","parameters":{"width":{"value":60,"unit":"%"},"alignX":"center","marginTop":{"value":60,"unit":"px"},"textStyle":"Display","fontFamily":"Times New Roman","text":"Twelve Years a Slave","textAlignX":"left","fontSize":{"value":60,"unit":"px"}},"ports":[],"dynamicports":[],"children":[]},{"id":"f81822cf-e638-c431-afcd-5547ed234492","type":"Text","parameters":{"width":{"value":60,"unit":"%"},"alignX":"center","marginTop":{"value":10,"unit":"px"},"textStyle":"Display","fontFamily":"Times New Roman","text":"Solomon Northup","textAlignX":"left","fontSize":{"value":36,"unit":"px"},"marginBottom":{"value":20,"unit":"px"}},"ports":[],"dynamicports":[],"children":[]},{"id":"dc7725dc-88e6-4b1b-c006-2b0e8ad897a2","type":"Group","label":"Toolbar","parameters":{"flexDirection":"row","sizeMode":"contentHeight","alignX":"center","columnGap":{"value":20,"unit":"px"},"marginTop":{"value":0,"unit":"px"},"flexWrap":"wrap","paddingLeft":{"value":20,"unit":"px"},"marginRight":{"value":0,"unit":"px"},"paddingTop":{"value":0,"unit":"px"},"rowGap":{"value":0,"unit":"px"},"position":"fixed","alignY":"bottom","paddingRight":{"value":20,"unit":"px"},"width":{"value":60,"unit":"%"},"backgroundColor":"#e4e2d6","borderTopLeftRadius":{"value":20,"unit":"px"},"borderTopRightRadius":{"value":20,"unit":"px"},"zIndex":5,"maxHeight":{"value":8,"unit":"%"},"scrollEnabled":true,"nativeScroll":true,"cssClassName":"toolbar","boxShadowEnabled":true,"boxShadowSpreadRadius":{"value":40,"unit":"px"},"boxShadowBlurRadius":{"value":40,"unit":"px"},"boxShadowColor":"#F8F5D7","boxShadowInset":false},"ports":[],"dynamicports":[],"children":[{"id":"de696d6a-222c-c44b-63ea-ecf9ac8a1ad4","type":"Group","label":"Topbar","parameters":{"flexDirection":"column","alignY":"top","alignItems":"center","position":"sticky","sizeMode":"contentHeight","backgroundColor":"#e4e2d6","zIndex":10},"ports":[],"dynamicports":[],"children":[{"id":"c652401e-cf6f-8c9e-1b84-17e02a891a6e","type":"Group","parameters":{"flexDirection":"row","alignItems":"center"},"ports":[],"dynamicports":[],"children":[{"id":"520deb71-fed0-eba9-bf01-214eefa94e94","type":"net.noodl.controls.button","label":"Expand/Collapse","parameters":{"useLabel":false,"useIcon":true,"sizeMode":"explicit","iconSpacing":{"value":0,"unit":"px"},"iconIconSource":{"class":"material-icons","code":"keyboard_arrow_up","codeAsClass":false},"iconSize":{"value":30,"unit":"px"},"backgroundColor":"transparent","iconColor":"Black","minWidth":{"value":0,"unit":"px"},"maxWidth":{"value":10,"unit":"%"},"width":{"value":40,"unit":"px"}},"ports":[],"dynamicports":[],"children":[]},{"id":"1700a06e-38b5-b6c8-0275-bd64d8cad15e","type":"Text","parameters":{"text":"ConceptNest","sizeMode":"contentWidth","alignX":"center","alignY":"center","height":{"value":60,"unit":"px"},"textAlignY":"center","mounted":false},"ports":[],"dynamicports":[],"children":[]},{"id":"7043efdb-7117-055f-995a-d08464333dc6","type":"net.noodl.controls.button","parameters":{"cssClassName":"","label":"ConceptNest","backgroundColor":"transparent","alignX":"center","marginTop":{"value":0,"unit":"px"},"useIcon":true,"iconIconSource":{"class":"material-icons","code":"file_upload","codeAsClass":false},"iconSpacing":{"value":15,"unit":"px"},"minWidth":{"value":0,"unit":"px"},"paddingLeft":{"value":0,"unit":"px"},"paddingRight":{"value":0,"unit":"px"},"borderRadius":{"value":0,"unit":"px"},"iconColor":"#000000","color":"#000000","textStyle":"Body Large","sizeMode":"contentWidth","height":{"value":60,"unit":"px"},"alignY":"center","mounted":true,"fontFamily":"Times New Roman","fontSize":{"value":24,"unit":"px"}},"ports":[],"dynamicports":[],"children":[]},{"id":"572ffc11-1efa-a2d2-4ec0-30a29e817647","type":"net.noodl.controls.button","label":"Time to read","parameters":{"useLabel":false,"useIcon":true,"sizeMode":"explicit","width":{"value":40,"unit":"px"},"iconSpacing":{"value":0,"unit":"px"},"iconIconSource":{"class":"material-icons","code":"access_time","codeAsClass":false},"iconSize":{"value":25,"unit":"px"},"backgroundColor":"transparent","iconColor":"Black","minWidth":{"value":0,"unit":"px"}},"ports":[],"dynamicports":[],"children":[]}]},{"id":"ae1a5975-9341-73e5-aba2-45a2ae8989cf","type":"Group","label":"Toggle levels","parameters":{"flexDirection":"row","sizeMode":"contentWidth","alignX":"center","position":"relative","justifyContent":"center","mounted":true,"visible":true,"marginTop":{"value":10,"unit":"px"},"columnGap":{"value":20,"unit":"px"}},"ports":[],"dynamicports":[],"children":[{"id":"eda4988a-4c06-9b2a-ad13-8a8bbe720b7a","type":"net.noodl.controls.button","parameters":{"label":"level 2","cssClassName":"view-l2","backgroundColor":"#0e29b5"},"stateParameters":{},"stateTransitions":{},"defaultStateTransitions":{},"ports":[],"dynamicports":[],"children":[]},{"id":"e9b2cdb8-8d0a-c257-3589-11a6a3d9f847","type":"net.noodl.controls.button","parameters":{"cssClassName":"view-l3","label":"Level 3","backgroundColor":"#0e29b5"},"ports":[],"dynamicports":[],"children":[]},{"id":"6436f170-4a3f-fdfc-3454-74a43deb6f91","type":"net.noodl.controls.button","parameters":{"cssClassName":"view-l4","label":"Level 4","backgroundColor":"#0e29b5"},"ports":[],"dynamicports":[],"children":[]}]}]},{"id":"b866c672-6509-4ea2-9e40-d06339a1460a","type":"/Index","parameters":{"mount":true},"ports":[],"dynamicports":[],"children":[]}]},{"id":"600c1487-d86d-ee2c-afdd-ed7ae9d1d26f","type":"Group","label":"Text","parameters":{"paddingLeft":{"value":20,"unit":"px"},"paddingTop":{"value":40,"unit":"px"},"paddingRight":{"value":20,"unit":"px"},"paddingBottom":{"value":120,"unit":"px"},"alignX":"center","height":{"value":100,"unit":"%"}},"ports":[],"dynamicports":[],"children":[{"id":"65e478c8-92cd-b5d4-aed8-82594fc93117","type":"Group","parameters":{"sizeMode":"contentHeight","alignX":"center","alignY":"top","width":{"value":60,"unit":"%"}},"ports":[],"dynamicports":[],"children":[{"id":"50777b46-56e2-476a-634c-351781e7ad3f","type":"module.inlineHtml","parameters":{"runJs":false},"ports":[],"dynamicports":[],"children":[]}]}]},{"id":"aae113f0-098d-558a-3b32-f1bdc23a2f2d","type":"module.inlineHtml","label":"Levels navigation","parameters":{"html":"<script>\r\n// Define the function\r\nfunction toggleNextLevel() {\r\n    // Get all the elements with class name that starts with 'level'\r\n    const elements = document.querySelectorAll('[class^=\"level\"]');\r\n\r\n    // Add click event listener to each element\r\n    elements.forEach(element => {\r\n        element.addEventListener('click', function() {\r\n            // Extract the level number from the class name\r\n            const level = Array.from(this.classList).find(cls => cls.startsWith('level'));\r\n            const levelNumber = parseInt(level.replace('level', ''));\r\n\r\n            // Find the parent accordion element\r\n            const accordionElement = this.closest('.accordion');\r\n\r\n            // If accordion element exists, find the next level elements within it\r\n            if (accordionElement) {\r\n                let nextElement = this.nextElementSibling;\r\n                while (nextElement && !nextElement.classList.contains(`level${levelNumber}`)) {\r\n                    const nextElementLevel = Array.from(nextElement.classList).find(cls => cls.startsWith('level'));\r\n                    const nextElementLevelNumber = parseInt(nextElementLevel.replace('level', ''));\r\n                    if (nextElementLevelNumber === levelNumber + 1) {\r\n                        const display = getComputedStyle(nextElement).display;\r\n                        nextElement.style.display = display === 'none' ? 'block' : 'none';\r\n                    } else if (nextElementLevelNumber > levelNumber + 1) {\r\n                        nextElement.style.display = 'none';\r\n                    }\r\n                    nextElement = nextElement.nextElementSibling;\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Call the function\r\ntoggleNextLevel();\r\n</script>","runJs":true},"ports":[],"dynamicports":[],"children":[]},{"id":"3e7e6329-578e-4395-a55c-4d00909ae8fe","type":"module.inlineHtml","label":"Toggle levels","parameters":{"html":"<script>\r\nfunction toggleLevel(level) {\r\n    // Get all the elements with class name 'level' followed by the level number\r\n    const levelElements = document.querySelectorAll(`.level${level}`);\r\n\r\n    // Check if any elements of this level are currently displayed\r\n    const anyDisplayed = Array.from(levelElements).some(element => getComputedStyle(element).display !== 'none');\r\n\r\n    // If any are displayed, hide all of them. Otherwise, show all of them.\r\n    levelElements.forEach(element => {\r\n        element.style.display = anyDisplayed ? 'none' : 'block';\r\n    });\r\n}\r\n\r\n// Add click event listener to all elements with class 'view-l2', 'view-l3', 'view-l4'\r\nfor (let level = 2; level <= 4; level++) {\r\n    const viewElements = document.querySelectorAll(`.view-l${level}`);\r\n    viewElements.forEach(element => {\r\n        element.addEventListener('click', function() {\r\n            toggleLevel(level);\r\n        });\r\n    });\r\n}\r\n</script>","runJs":true,"mounted":false},"ports":[],"dynamicports":[],"children":[]}]}]},{"id":"10fa011a-db2f-e573-47e6-ed69e091fbc1","type":"PageInputs","x":-248,"y":-2,"parameters":{},"ports":[],"dynamicports":[],"children":[]},{"id":"e0c5945b-03bc-cbe5-fc43-fc32bd85e1a7","type":"CSS Definition","x":1.7005303541368733,"y":-66.53251480078907,"parameters":{"style":".toolbar {\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none; \r\n}\r\n\r\n::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.title {\r\n    display: inline;\r\n    margin-right: 10px;\r\n    font-weight: bold;\r\n}\r\n\r\n.click .title {\r\n    cursor: pointer;\r\n    color: #0e29b5;\r\n    text-decoration: underline;\r\n}\r\n\r\n.level1,.level2,.level3,.level4,.level5 {\r\n    margin-bottom: 0px;\r\n    font-size: 24px;\r\n}\r\n\r\n.level2,.level3,.level4,.level5 {\r\n    display: none;\r\n}\r\n\r\n.accordion {\r\n    padding-top: 0px;\r\n}\r\n\r\n.accordion {\r\n    padding-top:20px;\r\n}\r\n\r\n.level1, .index1 {\r\n    padding: 10px 0px;\r\n    box-shadow: \r\n    -19px 0px 0px 0px #F8F5D7,  \r\n    -20px 0px 0px 0px black;\r\n}\r\n\r\n.level2, .index2 {\r\n    padding: 10px 0px;\r\n    margin-left: 19px;\r\n    box-shadow: \r\n    -18.2px 0px 0px 0px #F8F5D7,  \r\n    -19px 0px 0px 0px black,\r\n    -38.2px 0px 0px 0px #F8F5D7,  \r\n    -39px 0px 0px 0px black;\r\n    \r\n}\r\n\r\n.level3, .index3 {\r\n    padding: 10px 0px;\r\n    margin-left: 19px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px #F8F5D7,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px #F8F5D7,  \r\n    -20px 0px 0px 0px black,\r\n    -28.3px 0px 0px 0px #F8F5D7,  \r\n    -29.5px 0px 0px 0px black;\r\n}\r\n\r\n.level4, .index4 {\r\n    padding: 10px 0px;\r\n    margin-left: 28.5px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px #F8F5D7,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px #F8F5D7,  \r\n    -20px 0px 0px 0px black,\r\n    -28.3px 0px 0px 0px #F8F5D7,  \r\n    -29.5px 0px 0px 0px black,\r\n    -37.6px 0px 0px 0px #F8F5D7,  \r\n    -38.8px 0px 0px 0px black;\r\n}\r\n\r\n.level5, .index5 {\r\n    padding: 10px 0px;\r\n    margin-left: 38px;\r\n    box-shadow: \r\n    -9px 0px 0px 0px #F8F5D7,  \r\n    -10px 0px 0px 0px black,\r\n    -18.8px 0px 0px 0px #F8F5D7,  \r\n    -20px 0px 0px 0px black,\r\n    -28.3px 0px 0px 0px #F8F5D7,  \r\n    -29.5px 0px 0px 0px black,\r\n    -37.6px 0px 0px 0px #F8F5D7,  \r\n    -38.8px 0px 0px 0px black,\r\n    -47.6px 0px 0px 0px #F8F5D7,  \r\n    -48.8px 0px 0px 0px black;\r\n}"},"ports":[],"dynamicports":[],"children":[],"metadata":{"merge":{"soureCodePorts":["style"]}}},{"id":"c34e84c6-f374-f4aa-2034-53a1864f08ad","type":"JavaScriptFunction","label":"Toggle Display of HTML Elements","x":-288.0853030719966,"y":331.29189335578087,"parameters":{"functionScript":"// Get all elements with class starting with \"level\"\nconst elements = document.querySelectorAll('[class^=\"level\"]');\n\n// Add click event listener to each element\nelements.forEach(element => {\n  element.addEventListener('click', function() {\n    // Get the level number of the clicked element\n    const level = parseInt(this.className.replace('level', ''));\n\n    // Get all elements with class starting with \"level\" inside the same accordion\n    const accordion = this.closest('.accordion');\n    const accordionElements = accordion.querySelectorAll('[class^=\"level\"]');\n\n    // Toggle the display of the greater level class\n    accordionElements.forEach(accordionElement => {\n      const accordionLevel = parseInt(accordionElement.className.replace('level', ''));\n      if (accordionLevel > level) {\n        accordionElement.style.display = accordionElement.style.display === 'none' ? 'block' : 'none';\n      }\n    });\n  });\n});\n"},"ports":[],"dynamicports":[],"children":[],"metadata":{"prompt":{"history":[{"content":"look at a html code made of accordions. If i click the div class \"levelX\" (where X is a number) the function toggle the display of the greater level class (example: if click class \"level1\" display class \"level2\")  \n\nexample: if click class \"level1\" toggle the class \"level2\" inside the same accordion class  \n\nexample: if click class \"level1\" to hide the \"level2\" but the \"level3\" or something greater is visibile, hide all levels  \n\nexample of html structure: accordion class -level1 class -level2 class -level3 class accordion class -level1 class -level2 class","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"// Get all elements with class starting with \"level\"\nconst elements = document.querySelectorAll('[class^=\"level\"]');\n\n// Add click event listener to each element\nelements.forEach(element => {\n  element.addEventListener('click', function() {\n    // Get the level number of the clicked element\n    const level = parseInt(this.className.replace('level', ''));\n\n    // Get all elements with class starting with \"level\" inside the same accordion\n    const accordion = this.closest('.accordion');\n    const accordionElements = accordion.querySelectorAll('[class^=\"level\"]');\n\n    // Toggle the display of the greater level class\n    accordionElements.forEach(accordionElement => {\n      const accordionLevel = parseInt(accordionElement.className.replace('level', ''));\n      if (accordionLevel > level) {\n        accordionElement.style.display = accordionElement.style.display === 'none' ? 'block' : 'none';\n      }\n    });\n  });\n});\n"},"snowflakeId":"018b7b439d77-utyail","type":"user"},{"type":"assistant","content":"\nThis function adds a click event listener to each HTML element with a class name starting with \"level\". When an element is clicked, it extracts the level number from the class name of the clicked element. \n\nIt then finds all elements within the same accordion that have a class name starting with \"level\". For each of these elements, it compares their level number with the level number of the clicked element. If the level number is greater, it toggles the display property of the element, effectively showing or hiding it.\n\nThis function is useful for creating interactive accordion-style interfaces where clicking on a section reveals or hides sub-sections.\n","snowflakeId":"018b7b43e9b9-r40a0r","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"62b722e5-09c8-ba57-5cd1-dd350b1a1bcb","type":"String Format","x":-217.58532152572954,"y":595.3459969359084,"parameters":{"format":"<script>\n// Define the function\nfunction toggleNextLevel() {\n    // Get all the elements with class name that starts with 'level'\n    const elements = document.querySelectorAll('[class^=\"level\"]');\n\n    // Add click event listener to each element\n    elements.forEach(element => {\n        element.addEventListener('click', function() {\n            // Extract the level number from the class name\n            const level = Array.from(this.classList).find(cls => cls.startsWith('level'));\n            const levelNumber = parseInt(level.replace('level', ''));\n\n            // Find the parent accordion element\n            const accordionElement = this.closest('.accordion');\n\n            // If accordion element exists, find the next level elements within it\n            if (accordionElement) {\n                let nextElement = this.nextElementSibling;\n                while (nextElement && !nextElement.classList.contains(`level${levelNumber}`)) {\n                    const nextElementLevel = Array.from(nextElement.classList).find(cls => cls.startsWith('level'));\n                    const nextElementLevelNumber = parseInt(nextElementLevel.replace('level', ''));\n                    if (nextElementLevelNumber === levelNumber + 1) {\n                        const display = getComputedStyle(nextElement).display;\n                        nextElement.style.display = display === 'none' ? 'block' : 'none';\n                    } else if (nextElementLevelNumber > levelNumber + 1) {\n                        nextElement.style.display = 'none';\n                    }\n                    nextElement = nextElement.nextElementSibling;\n                }\n            }\n        });\n    });\n}\n\n// Call the function\ntoggleNextLevel();\n\nfunction toggleLevel2() {\n    // Get all the elements with class name 'level2'\n    const level2Elements = document.querySelectorAll('.level2');\n\n    // Toggle the display of each level2 element\n    level2Elements.forEach(element => {\n        const display = getComputedStyle(element).display;\n        element.style.display = display === 'none' ? 'block' : 'none';\n    });\n}\n\nfunction toggleLevel3() {\n    // Get all the elements with class name 'level2'\n    const level3Elements = document.querySelectorAll('.level3');\n\n    // Toggle the display of each level2 element\n    level3Elements.forEach(element => {\n        const display = getComputedStyle(element).display;\n        element.style.display = display === 'none' ? 'block' : 'none';\n    });\n}\n\nfunction toggleLevel4() {\n    // Get all the elements with class name 'level2'\n    const level4Elements = document.querySelectorAll('.level4');\n\n    // Toggle the display of each level2 element\n    level4Elements.forEach(element => {\n        const display = getComputedStyle(element).display;\n        element.style.display = display === 'none' ? 'block' : 'none';\n    });\n}\n\n// Add click event listener to all elements with class 'view-l2'\nconst l2Elements = document.querySelectorAll('.view-l2');\nl2Elements.forEach(element => {\n    element.addEventListener('click', toggleLevel2);\n});\n\nconst l3Elements = document.querySelectorAll('.view-l3');\nl3Elements.forEach(element => {\n    element.addEventListener('click', toggleLevel3);\n});\n\nconst l4Elements = document.querySelectorAll('.view-l4');\nl4Elements.forEach(element => {\n    element.addEventListener('click', toggleLevel4);\n});\n</script>"},"ports":[],"dynamicports":[{"name":"levelNumber","type":"string","plug":"input","index":2}],"children":[]},{"id":"b0f6e786-5ec9-5732-6d04-e8a8eca540b3","type":"String Format","x":808.1248048884753,"y":400.0455475314883,"parameters":{"format":"// Get the input string\nconst inputString = Inputs.InputString || '';\n\n// Define a function to convert the string into nested accordions\nfunction convertToAccordion(input) {\n    // Initialize an empty string to store the result\n    let result = '';\n\n    // Use a regular expression to match the tags and their content\n    let regex = /<level(\\d+)>(.*?)<\\/level\\1>/g;\n\n    // Initialize a variable to keep track of the current level\n    let currentLevel = 0;\n\n    // Iterate over the matches\n    let match;\n    while ((match = regex.exec(input)) !== null) {\n        // Get the level and the content from the match\n        let level = parseInt(match[1]);\n        let content = match[2];\n\n        // If the level is 1, start a new accordion\n        if (level === 1) {\n            if (result !== '') {\n                // Close the previous accordion\n                result += '</div>';\n            }\n            // Separate the accordion class from the level1 class\n            result += `<div class=\"accordion\"><div class=\"level1\">${content}</div>`;\n        }\n\n        // If the level is greater than 1, create a nested accordion inside the previous level\n        if (level > 1) {\n            result += `<div class=\"level${level}\">${content}</div>`;\n        }\n\n        // If the level is less than or equal to the current level, close the accordion\n        if (level <= currentLevel) {\n            result += '';\n        }\n\n        // Update the current level\n        currentLevel = level;\n    }\n\n    // Close the last accordion if it's not closed\n    if (result !== '') {\n        result += '</div>';\n    }\n\n    // Return the result\n    return result;\n}\n\n// Convert the input string into nested accordions\nlet accordionString = convertToAccordion(inputString);\n\n// Output the result\nOutputs.AccordionString = accordionString;\n\n// Signal success\nOutputs.Success();\n"},"ports":[],"dynamicports":[{"name":"content","type":"string","plug":"input","index":2},{"name":"level","type":"string","plug":"input","index":3}],"children":[]},{"id":"1e4daae1-1ef2-01d8-c945-fae9d8b4bbcc","type":"JavaScriptFunction","label":"AI Function","x":-305,"y":236,"parameters":{},"ports":[],"dynamicports":[],"children":[],"metadata":{"prompt":{"history":[{"content":"read the text from a txt file anche convert it to a string","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"}},"snowflakeId":"018b7ff02670-zqayb8","type":"user"}],"metadata":{"templateId":"function"}},"AiAssistant":"old"}},{"id":"d02460a4-7977-f8d5-9327-03933cc775ad","type":"Open File Picker","x":293.8246298900669,"y":266.39857352359263,"parameters":{},"ports":[],"dynamicports":[],"children":[]},{"id":"d6cbeefb-3068-a0d2-b8de-c56382a48ddc","type":"JavaScriptFunction","label":"Text File to String","x":510.39638744098545,"y":-68.64790484703133,"parameters":{"functionScript":"// Get the file from the inputs\nconst file = Inputs.File;\n\n// Check if the file is not null\nif (!file) throw new Error('No file provided');\n\n// Create a new FileReader instance\nconst reader = new FileReader();\n\n// Read the file as text\nreader.readAsText(file);\n\n// When the file is loaded\nreader.onload = function() {\n  // Output the file content as a string\n  Outputs.Text = reader.result;\n  Outputs.Success();\n};\n\n// If there is an error while reading the file\nreader.onerror = function() {\n  Outputs.error = reader.error;\n  Outputs.Failure();\n};\n"},"ports":[],"dynamicports":[{"name":"in-File","displayName":"File","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":6},{"name":"out-Text","displayName":"Text","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-error","displayName":"error","plug":"output","type":"*","group":"Outputs","index":8}],"children":[],"metadata":{"prompt":{"history":[{"content":"read a text from a txt file uploaded from the user and convert it to a string","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"// Get the file from the inputs\nconst file = Inputs.File;\n\n// Check if the file is not null\nif (!file) throw new Error('No file provided');\n\n// Create a new FileReader instance\nconst reader = new FileReader();\n\n// Read the file as text\nreader.readAsText(file);\n\n// When the file is loaded\nreader.onload = function() {\n  // Output the file content as a string\n  Outputs.Text = reader.result;\n  Outputs.Success();\n};\n\n// If there is an error while reading the file\nreader.onerror = function() {\n  Outputs.error = reader.error;\n  Outputs.Failure();\n};\n"},"snowflakeId":"018b7ff42151-5o2lyg","type":"user"},{"type":"assistant","content":"\nThis function reads a text file uploaded by the user and converts it to a string. It takes a file from the <span style=\"color: var(--base-color-yellow-400);\">Inputs.File</span> input, checks if the file is not null, and then uses the FileReader API to read the content of the file as text. \n\nWhen the file is successfully loaded, the content of the file is outputted as a string through the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Text</span> output and the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Success</span> signal is triggered.\n\nIf there is an error while reading the file, the error is outputted through the <span style=\"color: var(--base-color-yellow-400);\">Outputs.error</span> output and the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Failure</span> signal is triggered.\n","snowflakeId":"018b7ff46299-ybuzu7","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"c9cc98a1-00c5-97f8-1d04-8cf8cf6672af","type":"States","x":291.76035848498134,"y":591.3176958691544,"parameters":{"states":"mounted,unmounted","currentState":"unmounted","values":"mount","type-mount":"boolean","value-mounted-mount":true},"ports":[],"dynamicports":[{"type":{"name":"boolean","allowConnectionsOnly":true},"plug":"output","group":"Values","name":"mount","index":6},{"type":{"name":"enum","enums":[{"label":"Number","value":"number"},{"label":"String","value":"string"},{"label":"Boolean","value":"boolean"},{"label":"Color","value":"color"},{"label":"Text Style","value":"textStyle"}],"allowEditOnly":true},"default":"number","plug":"input","group":"Types","displayName":"mount","name":"type-mount","index":7},{"plug":"input","type":"boolean","group":"mounted Values","name":"value-mounted-mount","displayName":"mount","editorName":"mounted|mount","index":8},{"plug":"input","type":"curve","displayName":"Default","default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"mounted Transitions","name":"transitiondef-mounted","index":9},{"plug":"input","type":{"name":"signal","allowConnectionsOnly":true},"displayName":"To mounted","name":"to-mounted","group":"Go to state","index":10},{"plug":"output","type":"boolean","displayName":"At mounted","name":"at-mounted","group":"Current state","index":11},{"plug":"output","type":"signal","displayName":"Has Reached mounted","name":"reached-mounted","group":"Current state","index":12},{"plug":"input","type":"boolean","group":"unmounted Values","name":"value-unmounted-mount","displayName":"mount","editorName":"unmounted|mount","index":13},{"plug":"input","type":"curve","displayName":"Default","default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"unmounted Transitions","name":"transitiondef-unmounted","index":14},{"plug":"input","type":{"name":"signal","allowConnectionsOnly":true},"displayName":"To unmounted","name":"to-unmounted","group":"Go to state","index":15},{"plug":"output","type":"boolean","displayName":"At unmounted","name":"at-unmounted","group":"Current state","index":16},{"plug":"output","type":"signal","displayName":"Has Reached unmounted","name":"reached-unmounted","group":"Current state","index":17},{"plug":"input","type":{"name":"enum","enums":["mounted","unmounted"]},"group":"States","displayName":"State","name":"currentState","default":"mounted","index":18}],"children":[]},{"id":"e764ce0b-79a2-8a35-9ee5-3c77f2da1b01","type":"Timer","x":488.55571446848785,"y":587.0685852889287,"parameters":{"duration":1000},"ports":[],"dynamicports":[],"children":[]},{"id":"13aebcc5-f5d2-ab6b-748e-269250e0cd5a","type":"JavaScriptFunction","label":"Convert String to Nested Accordions","x":643.5170745680595,"y":326.36897485741014,"parameters":{"functionScript":"// Get the input string\r\nconst inputString = Inputs.InputString || '';\r\n\r\n// Define a function to convert the string into nested accordions\r\nfunction convertToAccordion(input) {\r\n    // Initialize an empty string to store the result\r\n    let result = '';\r\n\r\n    // Use a regular expression to match the tags and their content\r\n    let regex = /<level(\\d+)><title>(.*?)<\\/title>(.*?)<\\/level\\1>/g;\r\n\r\n    // Initialize a variable to keep track of the current level\r\n    let currentLevel = 0;\r\n\r\n    // Initialize a variable to keep track of the last match\r\n    let lastMatch = null;\r\n\r\n    // Iterate over the matches\r\n    let match;\r\n    while ((match = regex.exec(input)) !== null) {\r\n        // If there was a previous match, add it to the result\r\n        if (lastMatch !== null) {\r\n            // Get the level and the content from the last match\r\n            let level = parseInt(lastMatch[1]);\r\n            let title = lastMatch[2];\r\n            let content = lastMatch[3];\r\n\r\n            // If the level is 1, start a new accordion\r\n            if (level === 1) {\r\n                if (result !== '') {\r\n                    // Close the previous accordion\r\n                    result += '</div>';\r\n                }\r\n                // Separate the accordion class from the level1 class\r\n                result += `<div class=\"accordion\"><div class=\"level1 click\"><div class=\"title\">${title}</div>${content}</div>`;\r\n            }\r\n\r\n            // If the level is greater than 1, create a nested accordion inside the previous level\r\n            if (level > 1) {\r\n                // If the next level is the same or lower, don't add the \"click\" class\r\n                if (parseInt(match[1]) <= level) {\r\n                    result += `<div class=\"level${level}\"><div class=\"title\">${title}</div>${content}</div>`;\r\n                } else {\r\n                    result += `<div class=\"level${level} click\"><div class=\"title\">${title}</div>${content}</div>`;\r\n                }\r\n            }\r\n\r\n            // If the level is less than or equal to the current level, close the accordion\r\n            if (level <= currentLevel) {\r\n                result += '';\r\n            }\r\n\r\n            // Update the current level\r\n            currentLevel = level;\r\n        }\r\n\r\n        // Update the last match\r\n        lastMatch = match;\r\n    }\r\n\r\n    // If there was a last match, add it to the result without the \"click\" class\r\n    if (lastMatch !== null) {\r\n        // Get the level and the content from the last match\r\n        let level = parseInt(lastMatch[1]);\r\n        let title = lastMatch[2];\r\n        let content = lastMatch[3];\r\n\r\n        // Add the last match to the result without the \"click\" class\r\n        result += `<div class=\"level${level}\"><div class=\"title\">${title}</div>${content}</div>`;\r\n    }\r\n\r\n    // Close the last accordion if it's not closed\r\n    if (result !== '') {\r\n        result += '</div>';\r\n    }\r\n\r\n    // Return the result\r\n    return result;\r\n}\r\n\r\n// Convert the input string into nested accordions\r\nlet accordionString = convertToAccordion(inputString);\r\n\r\n// Output the result\r\nOutputs.AccordionString = accordionString;\r\n\r\n// Signal success\r\nOutputs.Success();"},"ports":[],"dynamicports":[{"name":"in-InputString","displayName":"InputString","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-AccordionString","displayName":"AccordionString","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"merge":{"soureCodePorts":["functionScript"]}}},{"id":"98aa2221-b6b0-4074-9775-7ff936eba19c","type":"JavaScriptFunction","x":515.8559161486937,"y":-146.41808447466676,"parameters":{"functionScript":"// Get the file from the inputs\r\nconst file = Inputs.File;\r\n\r\n// Check if the file is not null\r\nif (!file) throw new Error('No file provided');\r\n\r\n// Create a new FileReader instance\r\nconst reader = new FileReader();\r\n\r\n// Read the file as text\r\nreader.readAsText(file);\r\n\r\n// When the file is loaded\r\nreader.onload = function() {\r\n  // Output the file content as a string\r\n  Outputs.Text = reader.result;\r\n  Outputs.Success();\r\n};\r\n\r\n// If there is an error while reading the file\r\nreader.onerror = function() {\r\n  Outputs.error = reader.error;\r\n  Outputs.Failure();\r\n};\r\n"},"ports":[],"dynamicports":[{"name":"in-File","displayName":"File","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":6},{"name":"out-Text","displayName":"Text","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-error","displayName":"error","plug":"output","type":"*","group":"Outputs","index":8}],"children":[],"metadata":{"merge":{"soureCodePorts":["functionScript"]}}},{"id":"596360a1-d8a5-ee38-c1ea-b47d7102375d","type":"States","x":494.2718478937801,"y":826.1391666200656,"parameters":{"states":"expanded,collapsed","currentState":"collapsed","values":"mounted,icon,max-height","type-mounted":"boolean","value-expanded-mounted":true,"type-icon":"number","value-expanded-icon":180,"value-collapsed-icon":0,"value-expanded-max-height":50,"value-collapsed-max-height":6.5},"ports":[],"dynamicports":[{"type":{"name":"boolean","allowConnectionsOnly":true},"plug":"output","group":"Values","name":"mounted","index":6},{"type":{"name":"enum","enums":[{"label":"Number","value":"number"},{"label":"String","value":"string"},{"label":"Boolean","value":"boolean"},{"label":"Color","value":"color"},{"label":"Text Style","value":"textStyle"}],"allowEditOnly":true},"default":"number","plug":"input","group":"Types","displayName":"mounted","name":"type-mounted","index":7},{"type":{"name":"number","allowConnectionsOnly":true},"plug":"output","group":"Values","name":"icon","index":8},{"type":{"name":"enum","enums":[{"label":"Number","value":"number"},{"label":"String","value":"string"},{"label":"Boolean","value":"boolean"},{"label":"Color","value":"color"},{"label":"Text Style","value":"textStyle"}],"allowEditOnly":true},"default":"number","plug":"input","group":"Types","displayName":"icon","name":"type-icon","index":9},{"type":{"name":"number","allowConnectionsOnly":true},"plug":"output","group":"Values","name":"max-height","index":10},{"type":{"name":"enum","enums":[{"label":"Number","value":"number"},{"label":"String","value":"string"},{"label":"Boolean","value":"boolean"},{"label":"Color","value":"color"},{"label":"Text Style","value":"textStyle"}],"allowEditOnly":true},"default":"number","plug":"input","group":"Types","displayName":"max-height","name":"type-max-height","index":11},{"plug":"input","type":"boolean","group":"expanded Values","name":"value-expanded-mounted","displayName":"mounted","editorName":"expanded|mounted","index":12},{"plug":"input","type":"number","group":"expanded Values","name":"value-expanded-icon","displayName":"icon","editorName":"expanded|icon","index":13},{"plug":"input","type":"number","group":"expanded Values","name":"value-expanded-max-height","displayName":"max-height","editorName":"expanded|max-height","index":14},{"plug":"input","type":"curve","displayName":"Default","default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"expanded Transitions","name":"transitiondef-expanded","index":15},{"plug":"input","type":{"name":"curve"},"default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"expanded Transitions","name":"transition-expanded-icon","displayName":"icon","editorName":"Transition expanded|icon","index":16},{"plug":"input","type":{"name":"curve"},"default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"expanded Transitions","name":"transition-expanded-max-height","displayName":"max-height","editorName":"Transition expanded|max-height","index":17},{"plug":"input","type":{"name":"signal","allowConnectionsOnly":true},"displayName":"To expanded","name":"to-expanded","group":"Go to state","index":18},{"plug":"output","type":"boolean","displayName":"At expanded","name":"at-expanded","group":"Current state","index":19},{"plug":"output","type":"signal","displayName":"Has Reached expanded","name":"reached-expanded","group":"Current state","index":20},{"plug":"input","type":"boolean","group":"collapsed Values","name":"value-collapsed-mounted","displayName":"mounted","editorName":"collapsed|mounted","index":21},{"plug":"input","type":"number","group":"collapsed Values","name":"value-collapsed-icon","displayName":"icon","editorName":"collapsed|icon","index":22},{"plug":"input","type":"number","group":"collapsed Values","name":"value-collapsed-max-height","displayName":"max-height","editorName":"collapsed|max-height","index":23},{"plug":"input","type":"curve","displayName":"Default","default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"collapsed Transitions","name":"transitiondef-collapsed","index":24},{"plug":"input","type":{"name":"curve"},"default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"collapsed Transitions","name":"transition-collapsed-icon","displayName":"icon","editorName":"Transition collapsed|icon","index":25},{"plug":"input","type":{"name":"curve"},"default":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"group":"collapsed Transitions","name":"transition-collapsed-max-height","displayName":"max-height","editorName":"Transition collapsed|max-height","index":26},{"plug":"input","type":{"name":"signal","allowConnectionsOnly":true},"displayName":"To collapsed","name":"to-collapsed","group":"Go to state","index":27},{"plug":"output","type":"boolean","displayName":"At collapsed","name":"at-collapsed","group":"Current state","index":28},{"plug":"output","type":"signal","displayName":"Has Reached collapsed","name":"reached-collapsed","group":"Current state","index":29},{"plug":"input","type":{"name":"enum","enums":["expanded","collapsed"]},"group":"States","displayName":"State","name":"currentState","default":"expanded","index":30}],"children":[]},{"id":"bb8eb0f4-ac65-ce15-4fb5-28f9a31960f3","type":"JavaScriptFunction","label":"Count Characters in XML Tags","x":773.6434454285069,"y":72.8920689884732,"parameters":{"functionScript":"\n// Get the XML code from the input\nconst xmlCode = Inputs.XmlCode || '';\n\n// Define the regular expression pattern to match the tags containing \"level\" or \"title\"\nconst pattern = /<([^>]+)>([^<]*?(level|title)[^<]*)<\\/\\1>/gi;\n\n// Find all matches in the XML code\nconst matches = xmlCode.match(pattern);\n\n// Initialize the character count\nlet characterCount = 0;\n\n// Iterate through the matches and count the characters inside the tags\nif (matches) {\n  for (const match of matches) {\n    // Remove the opening and closing tags\n    const content = match.replace(/<\\/?[^>]+(>|$)/g, '');\n    // Add the character count to the total count\n    characterCount += content.length;\n  }\n}\n\n// Output the character count\nOutputs.CharacterCount = characterCount;\nOutputs.Success();\n"},"ports":[],"dynamicports":[{"name":"in-XmlCode","displayName":"XmlCode","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-CharacterCount","displayName":"CharacterCount","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"prompt":{"history":[{"content":"given an xml code count the characters inside the tags containing the word \"level\" or \"title\"","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"\n// Get the XML code from the input\nconst xmlCode = Inputs.XmlCode || '';\n\n// Check if the XML code is empty\nif (!xmlCode) {\n  Outputs.Error = 'XML code is empty';\n  Outputs.Failure();\n  return;\n}\n\n// Define the regular expression pattern to match the tags containing \"level\" or \"title\"\nconst pattern = /<([^>]+)>([^<]*?(level|title)[^<]*)<\\/\\1>/gi;\n\n// Find all matches in the XML code\nconst matches = xmlCode.match(pattern);\n\n// Initialize the character count\nlet characterCount = 0;\n\n// Iterate through the matches and count the characters inside the tags\nif (matches) {\n  for (const match of matches) {\n    // Remove the opening and closing tags\n    const content = match.replace(/<\\/?[^>]+(>|$)/g, '');\n    // Add the character count to the total count\n    characterCount += content.length;\n  }\n}\n\n// Output the character count\nOutputs.CharacterCount = characterCount;\nOutputs.Success();\n"},"snowflakeId":"018b9f56f356-yrz9yv","type":"user"},{"type":"assistant","content":"\nThis function takes an XML code as input and counts the number of characters inside the tags that contain the words \"level\" or \"title\". \n\nFirst, it checks if the XML code is empty. If it is, it sets the Outputs.Error property to \"XML code is empty\", triggers the Outputs.Failure output signal, and returns.\n\nThen, it defines a regular expression pattern to match the tags containing \"level\" or \"title\".\n\nNext, it finds all matches in the XML code using the pattern.\n\nAfter that, it initializes a variable called characterCount to 0.\n\nThen, it iterates through the matches and counts the characters inside the tags by removing the opening and closing tags and adding the character count to the total count.\n\nFinally, it outputs the character count by setting the Outputs.CharacterCount property to the total count and triggers the Outputs.Success output signal.\n","snowflakeId":"018b9f57099c-318we0","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"298cb7bc-8850-0ee7-fd26-13ff43a97f07","type":"Expression","x":980.4880531034817,"y":207.4390764112098,"parameters":{"expression":"wordcount/200"},"ports":[],"dynamicports":[{"group":"Parameters","name":"wordcount","type":{"name":"*","editAsType":"string"},"plug":"input","index":7}],"children":[],"metadata":{"merge":{"soureCodePorts":["expression"]}}},{"id":"235c3565-64bd-3cdd-6c98-8ec4fd7626ce","type":"JavaScriptFunction","label":"minutes","x":1178.0000125350082,"y":157.00000856049348,"parameters":{"functionScript":"\nconst number = Inputs.Number || 0;\nconst result = Math.floor(number);\nOutputs.Result = result;\n"},"ports":[],"dynamicports":[{"name":"in-Number","displayName":"Number","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Result","displayName":"Result","plug":"output","type":"*","group":"Outputs","index":5}],"children":[],"metadata":{"prompt":{"history":[{"content":"take the numbers before decimal","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"\nconst number = Inputs.Number || 0;\nconst result = Math.floor(number);\nOutputs.Result = result;\n"},"snowflakeId":"018b9f60bc51-klqgyy","type":"user"},{"type":"assistant","content":"\nThis function takes an input number and rounds it down to the nearest whole number. \n\nIt first checks if the input number exists, if not it defaults to 0. \n\nThen it uses the Math.floor() function to round down the number to the nearest whole number. \n\nThe rounded number is then assigned to the Outputs.Result property.\n","snowflakeId":"018b9f60c922-s0m2lo","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"c9f85410-6a5b-43a8-1ce9-953d4057e53c","type":"JavaScriptFunction","label":"AI Function","x":1171.0000140636678,"y":319.0000268279749,"parameters":{"functionScript":"\nconst number = Inputs.Number || 0;\nconst decimal = number % 1;\nconst decimalDigits = decimal.toString().split('.')[1] || '';\nOutputs.DecimalDigits = decimalDigits;\nOutputs.Success();\n"},"ports":[],"dynamicports":[{"name":"in-Number","displayName":"Number","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-DecimalDigits","displayName":"DecimalDigits","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"prompt":{"history":[{"content":"take the numbers after decimal","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"\nconst number = Inputs.Number || 0;\nconst decimal = number % 1;\nconst decimalDigits = decimal.toString().split('.')[1] || '';\nOutputs.DecimalDigits = decimalDigits;\nOutputs.Success();\n"},"snowflakeId":"018b9f614a0f-5bqinm","type":"user"},{"type":"assistant","content":"\nThis function takes an input number and calculates the decimal digits of that number.\n\nIt first checks if the input number exists, if not it sets the number to 0.\n\nThen it calculates the decimal part of the number by using the modulo operator (%).\n\nNext, it converts the decimal part to a string and splits it by the decimal point (.) to get an array of strings.\n\nIf there is a second element in the array (i.e. there are decimal digits), it assigns it to the variable decimalDigits. Otherwise, it assigns an empty string.\n\nFinally, it sets <span style=\"color: var(--base-color-yellow-400);\">Outputs.\nThis function takes an input number and calculates the decimal digits of that number.\n\nIt first checks if the input number exists, if not it sets the number to 0.\n\nThen it calculates the decimal part of the number by using the modulo operator (%).\n\nNext, it converts the decimal part to a string and splits it by the decimal point (.) to get an array of strings.\n\nIf there is a second element in the array (i.e. there are decimal digits), it assigns it to the variable decimalDigits. Otherwise, it assigns an empty string.\n\nFinally, it sets the </span> to the calculated decimal digits and triggers <span style=\"color: var(--base-color-yellow-400);\">Outputs.Success</span> output signal.\n","snowflakeId":"018b9f615208-zj8qaf","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"d5700149-6744-55d6-cc6b-f82b132b0dde","type":"Expression","label":"","x":1167.9880674346643,"y":440.43909422009347,"parameters":{"expression":"seconds*0.6"},"ports":[],"dynamicports":[{"group":"Parameters","name":"seconds","type":{"name":"*","editAsType":"string"},"plug":"input","index":7}],"children":[],"metadata":{"merge":{"soureCodePorts":["expression"]}}},{"id":"323fe818-f336-bdc7-5055-d358b7d663b6","type":"JavaScriptFunction","label":"seconds","x":1170.0000040509478,"y":560.0000381400556,"parameters":{"functionScript":"\nconst number = Inputs.Number || 0;\nconst firstTwoDigits = Math.floor(number / 10);\nOutputs.FirstTwoDigits = firstTwoDigits;\nOutputs.Success();\n"},"ports":[],"dynamicports":[{"name":"in-Number","displayName":"Number","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-FirstTwoDigits","displayName":"FirstTwoDigits","plug":"output","type":"*","group":"Outputs","index":6}],"children":[],"metadata":{"prompt":{"history":[{"content":"take only the first two numbers of a number","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"\nconst number = Inputs.Number || 0;\nconst firstTwoDigits = Math.floor(number / 10);\nOutputs.FirstTwoDigits = firstTwoDigits;\nOutputs.Success();\n"},"snowflakeId":"018b9f678e5f-he0clo","type":"user"},{"type":"assistant","content":"\nThis function takes a number as input and calculates the first two digits of that number.\n\nIt first checks if the input number exists, if not it sets the number to 0.\n\nThen it calculates the first two digits of the number by dividing the number by 10 and rounding down using the Math.floor() function.\n\nThe calculated first two digits are then assigned to the Outputs.FirstTwoDigits property.\n\nFinally, it triggers the Outputs.Success output signal.\n","snowflakeId":"018b9f6793b8-l9unvu","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}},{"id":"e28366ac-0b85-6d24-069e-876d2846d887","type":"String Format","x":1396.9880849378162,"y":392.1890905322024,"parameters":{"format":"{minutes}.{seconds}"},"ports":[],"dynamicports":[{"name":"minutes","type":"string","plug":"input","index":2},{"name":"seconds","type":"string","plug":"input","index":3}],"children":[]},{"id":"d4b366bb-dc57-55b4-8c73-bf62335afe0f","type":"JavaScriptFunction","label":"Count Words in","x":792.2859478023062,"y":195.73757876196512,"parameters":{"functionScript":"\n// Get the XML code from the input\nconst xmlCode = Inputs.XmlCode || '';\n\n// Check if the XML code is empty\nif (!xmlCode) {\n  Outputs.Error = 'XML code is empty';\n  Outputs.Failure();\n  return;\n}\n\n// Define the regular expression pattern to match the tags containing \"level\" or \"title\"\nconst pattern = /<[^>]*?(level|title)[^>]*?>(.*?)<\\/[^>]*?>/gi;\n\n// Extract the tags containing \"level\" or \"title\" from the XML code\nconst matchedTags = xmlCode.match(pattern);\n\n// Check if there are no matched tags\nif (!matchedTags) {\n  Outputs.WordCount = 0;\n  Outputs.Success();\n  return;\n}\n\n// Count the words inside the matched tags\nlet wordCount = 0;\nmatchedTags.forEach(tag => {\n  const words = tag.replace(/<\\/?[^>]+(>|$)/g, '').split(' ');\n  wordCount += words.length;\n});\n\n// Send the word count to the output\nOutputs.WordCount = wordCount;\nOutputs.Success();\n"},"ports":[],"dynamicports":[{"name":"in-XmlCode","displayName":"XmlCode","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":6},{"name":"out-Error","displayName":"Error","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-WordCount","displayName":"WordCount","plug":"output","type":"*","group":"Outputs","index":8}],"children":[],"metadata":{"prompt":{"history":[{"content":"given an xml code count the words inside the tags containing the word \"level\" or \"title\"","metadata":{"user":{"id":"125c9f95-7d62-46f6-8191-b596629340c4","email":"mat.palu@gmail.com","name":"Matteo Palù"},"code":"\n// Get the XML code from the input\nconst xmlCode = Inputs.XmlCode || '';\n\n// Check if the XML code is empty\nif (!xmlCode) {\n  Outputs.Error = 'XML code is empty';\n  Outputs.Failure();\n  return;\n}\n\n// Define the regular expression pattern to match the tags containing \"level\" or \"title\"\nconst pattern = /<[^>]*?(level|title)[^>]*?>(.*?)<\\/[^>]*?>/gi;\n\n// Extract the tags containing \"level\" or \"title\" from the XML code\nconst matchedTags = xmlCode.match(pattern);\n\n// Check if there are no matched tags\nif (!matchedTags) {\n  Outputs.WordCount = 0;\n  Outputs.Success();\n  return;\n}\n\n// Count the words inside the matched tags\nlet wordCount = 0;\nmatchedTags.forEach(tag => {\n  const words = tag.replace(/<\\/?[^>]+(>|$)/g, '').split(' ');\n  wordCount += words.length;\n});\n\n// Send the word count to the output\nOutputs.WordCount = wordCount;\nOutputs.Success();\n"},"snowflakeId":"018b9f69c7a6-wbyl85","type":"user"},{"type":"assistant","content":"\nThis function counts the number of words inside XML tags that contain the words \"level\" or \"title\".\n\nIt takes <span style=\"color: var(--base-color-yellow-400);\">Inputs.XmlCode</span> as input, which is the XML code to be analyzed.\n\nFirst, it checks if the XML code is empty. If it is, it sets <span style=\"color: var(--base-color-yellow-400);\">Outputs.Error</span> output to \"XML code is empty\" <span style=\"color: var(--base-color-yellow-400);\">Outputs.Failure</span> output signal.\n\nThen, it defines a regular expression pattern to match the tags containing \"level\" or \"title\".\n\nNext, it extracts the matched tags from the XML code using the pattern.\n\nIf there are no matched tags, it sets the <span style=\"color: var(--base-color-yellow-400);\">Outputs.WordCount</span> output to 0 and triggers <span style=\"color: var(--base-color-yellow-400);\">Outputs.Success</span> variable.\n\nFinally, it sends the word count to the <span style=\"color: var(--base-color-yellow-400);\">Outputs.WordCount</span> output and triggers the <span style=\"color: var(--base-color-yellow-400);\">Outputs.Success</span> output signal.\n","snowflakeId":"018b9f69e7d3-04mu1c","metadata":{}}],"metadata":{"templateId":"function"}},"AiAssistant":"old","merge":{"soureCodePorts":["functionScript"]}}}],"visualRoots":["a4b7e4d4-c01d-1267-30b6-c2b448b90067"]}}],"settings":{"bodyScroll":true,"navigationPathType":"path","headCode":"<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>"},"rootNodeId":"246f9453-a119-ac78-171e-3806cf596ecc","version":"4","metadata":{"styles":{"text":{"Display":{"letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none","fontSize":{"value":"40","unit":"px"},"fontFamily":"fonts/Roboto/Roboto-Regular.ttf","color":"#000000"},"Headline":{"fontFamily":"fonts/Roboto/Roboto-Regular.ttf","fontSize":{"value":"32","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none"},"Title Large":{"fontFamily":"fonts/Roboto/Roboto-Bold.ttf","fontSize":{"value":"24","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120%","unit":"px"},"textTransform":"none"},"Title Medium":{"fontFamily":"fonts/Roboto/Roboto-Medium.ttf","fontSize":{"value":"20","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none"},"Title Small":{"fontFamily":"fonts/Roboto/Roboto-Bold.ttf","fontSize":{"value":"16","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none"},"Label Large":{"fontFamily":"fonts/Roboto/Roboto-Medium.ttf","fontSize":{"value":"16","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none"},"Label Medium":{"fontFamily":"fonts/Roboto/Roboto-Medium.ttf","fontSize":{"value":"14","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none"},"Label Small":{"fontFamily":"fonts/Roboto/Roboto-Medium.ttf","fontSize":{"value":"12","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"120","unit":"%"},"textTransform":"none"},"Body Large":{"fontFamily":"fonts/Roboto/Roboto-Regular.ttf","fontSize":{"value":"20","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"150","unit":"%"},"textTransform":"none"},"Body Medium":{"fontFamily":"fonts/Roboto/Roboto-Regular.ttf","fontSize":{"value":"16","unit":"px"},"color":"#000000","letterSpacing":"Auto","lineHeight":{"value":"150","unit":"%"},"textTransform":"none"},"Body Small":{"letterSpacing":"Auto","lineHeight":{"value":"150","unit":"%"},"textTransform":"none","fontFamily":"fonts/Roboto/Roboto-Regular.ttf","fontSize":{"value":"14","unit":"px"},"color":"#000000"}},"colors":{"Primary":"#5836F5","Primary Dark":"#3F22B8","Primary Subtle":"#C9BFFC","Primary Light":"#F7F5FF","Grey - 900":"#1F1F1F","Grey - 800":"#383838","Grey - 700":"#4C4C4C","Grey - 600":"#757575","Grey - 500":"#A5A5A5","Grey - 400":"#CECECE","Grey - 300":"#E9E9E9","Grey - 200":"#F4F4F4","Grey - 100":"#FBFBFB","Success":"#49AD7F","Notice":"#F2C441","Danger":"#F75A4F","White":"#FFFFFF","Black":"#000000"}}},"variants":[{"typename":"Text","parameters":{"textStyle":"Body Medium"},"stateParamaters":{},"stateTransitions":{}},{"typename":"net.noodl.controls.button","parameters":{"height":{"value":40,"unit":"px"},"sizeMode":"contentWidth","backgroundColor":"Primary","iconIconSource":{"class":"material-icons","code":"home"},"iconSpacing":{"value":8,"unit":"px"},"borderRadius":{"value":4,"unit":"px"},"textStyle":"Label Medium","paddingTop":{"value":0,"unit":"px"},"paddingLeft":{"value":24,"unit":"px"},"paddingRight":{"value":24,"unit":"px"},"paddingBottom":{"value":0,"unit":"px"},"color":"#FFFFFF","minWidth":{"value":80,"unit":"px"},"useIcon":false,"iconSize":{"value":20,"unit":"px"}},"stateParamaters":{"hover":{"backgroundColor":"Primary Dark"},"pressed":{"backgroundColor":"Primary","color":"White"},"disabled":{"backgroundColor":"Grey - 300","color":"Grey - 600"}},"stateTransitions":{},"defaultStateTransitions":{"neutral":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"hover":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"pressed":{"curve":[0,0,0.58,1],"dur":0,"delay":0}}},{"typename":"net.noodl.controls.textinput","parameters":{"useLabel":true,"sizeMode":"explicit","height":{"value":40,"unit":"px"},"textStyle":"Body Medium","borderStyle":"solid","borderRadius":{"value":4,"unit":"px"},"borderWidth":{"value":1,"unit":"px"},"borderColor":"Grey - 700","labeltextStyle":"Label Small","paddingLeft":{"value":12,"unit":"px"},"paddingRight":{"value":8,"unit":"px"},"labelSpacing":{"value":4,"unit":"px"},"placeholder":"Type here","color":"Grey - 900","placeHolderOpacity":0.65,"enabled":true,"blockTouch":false,"useIcon":false,"iconIconSource":{"class":"material-icons","code":"home"},"iconSize":{"value":20,"unit":"px"},"iconSpacing":{"value":4,"unit":"px"},"iconColor":"Grey - 700","labelcolor":"Grey - 700"},"stateParamaters":{"hover":{"labelcolor":"Grey - 700","borderColor":"Grey - 700","borderStyle":"solid","color":"Grey - 900"},"focused":{"borderColor":"Primary","labelcolor":"Primary","borderWidth":{"value":1,"unit":"px"},"boxShadowEnabled":false,"boxShadowColor":"Primary","borderStyle":"solid"},"disabled":{"labelcolor":"Grey - 500","backgroundColor":"Grey - 200","borderWidth":{"value":1,"unit":"px"},"borderColor":"Grey - 500","color":"Grey - 600"}},"stateTransitions":{},"defaultStateTransitions":{"neutral":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"focused":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"hover":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"disabled":{"curve":[0,0,0.58,1],"dur":0,"delay":0}}},{"typename":"net.noodl.controls.options","parameters":{"sizeMode":"explicit","height":{"value":40,"unit":"px"},"borderWidth":{"value":1,"unit":"px"},"borderRadius":{"value":4,"unit":"px"},"borderColor":"Grey - 700","boxShadowColor":"Dark Gray","useIcon":true,"iconIconSource":{"class":"material-icons","code":"expand_more"},"iconPlacement":"right","iconSize":{"value":20,"unit":"px"},"paddingRight":{"value":12,"unit":"px"},"textStyle":"Body Medium","paddingLeft":{"value":12,"unit":"px"},"marginTop":{"value":0,"unit":"px"},"width":{"value":100,"unit":"%"},"iconColor":"Grey - 700","placeholderOpacity":0.65,"placeholder":"Select option","useLabel":true,"labelSpacing":{"value":4,"unit":"px"},"labeltextStyle":"Label Small","labelcolor":"Grey - 700","items":"[\n    {\"Label\":\"Option 1\", \"Value\":\"1\"},\n    {\"Label\":\"Option 2\", \"Value\":\"2\"},\n    {\"Label\":\"Option 3\", \"Value\":\"3\"}\n]"},"stateParamaters":{"hover":{"borderColor":"Grey - 700","borderRadius":{"value":4,"unit":"px"},"iconColor":"Grey - 900","iconSize":{"value":20,"unit":"px"},"iconPlacement":"right","color":"Grey - 900","labelcolor":"Grey - 700"},"focused":{"borderColor":"Primary","boxShadowColor":"Primary","borderRadius":{"value":4,"unit":"px"},"useIcon":true,"iconColor":"Primary","iconIconSource":{"class":"material-icons","code":"keyboard_arrow_up"},"iconPlacement":"right","color":"Grey - 900","labelcolor":"Primary"},"pressed":{"borderRadius":{"value":4,"unit":"px"}},"disabled":{"labelcolor":"Grey - 500","iconColor":"Grey - 500","borderColor":"Grey - 500","color":"Grey - 600","backgroundColor":"Grey - 200"}},"stateTransitions":{},"defaultStateTransitions":{"neutral":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"focused":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"hover":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"pressed":{"curve":[0,0,0.58,1],"dur":0,"delay":0}}},{"typename":"net.noodl.controls.range","parameters":{"thumbColor":"Primary","thumbBorderRadius":{"value":100,"unit":"%"},"trackHeight":{"value":4,"unit":"px"},"trackActiveColor":"Primary","trackColor":"Primary Subtle","width":{"value":100,"unit":"%"},"trackBorderRadius":{"value":100,"unit":"px"},"thumbHeight":{"value":16,"unit":"px"},"thumbWidth":{"value":16,"unit":"px"}},"stateParamaters":{"hover":{"thumbColor":"Primary Dark","trackActiveColor":"Primary Dark"},"disabled":{"trackActiveColor":"Grey - 500","trackColor":"Grey - 300","thumbColor":"Grey - 500"}},"stateTransitions":{}},{"typename":"net.noodl.controls.checkbox","parameters":{"width":{"value":20,"unit":"px"},"height":{"value":20,"unit":"px"},"useIcon":false,"borderWidth":{"value":1,"unit":"px"},"useLabel":true,"labeltextStyle":"Body Medium","borderRadius":{"value":2,"unit":"px"},"borderColor":"Grey - 700","labelfontSize":{"value":16,"unit":"px"},"labelcolor":"Grey - 900","labelSpacing":{"value":12,"unit":"px"}},"stateParamaters":{"checked":{"useIcon":true,"iconIconSource":{"class":"material-icons","code":"check"},"backgroundColor":"Primary","borderColor":"Primary","iconSize":{"value":16,"unit":"px"}},"disabled":{"opacity":0.5},"hover":{"borderColor":"Grey - 700"},"pressed":{}},"stateTransitions":{},"defaultStateTransitions":{"neutral":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"hover":{"curve":[0,0,0.58,1],"dur":300,"delay":0},"checked":{"curve":[0,0,0.58,1],"dur":0,"delay":0}}},{"typename":"net.noodl.controls.radiobutton","parameters":{"width":{"value":20,"unit":"px"},"height":{"value":20,"unit":"px"},"useLabel":true,"labeltextStyle":"Body Large","borderWidth":{"value":1,"unit":"px"},"value":"0","useIcon":false,"fillColor":"transparent","borderColor":"Grey - 700","labelfontSize":{"value":16,"unit":"px"},"marginBottom":{"value":8,"unit":"px"},"labelcolor":"Grey - 900","labelSpacing":{"value":12,"unit":"px"}},"stateParamaters":{"checked":{"fillColor":"Primary","borderColor":"Primary","borderWidth":{"value":1,"unit":"px"},"backgroundColor":"transparent","width":{"value":20,"unit":"px"},"height":{"value":20,"unit":"px"},"fillSpacing":{"value":2,"unit":"px"}},"hover":{"backgroundColor":"transparent","borderColor":"Grey - 700","width":{"value":20,"unit":"px"},"height":{"value":20,"unit":"px"}},"disabled":{"borderColor":"Grey - 500","labelcolor":"Grey - 500","fillColor":"transparent"}},"stateTransitions":{},"defaultStateTransitions":{"neutral":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"hover":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"checked":{"curve":[0,0,0.58,1],"dur":0,"delay":0}}},{"name":"show","typename":"net.noodl.controls.button","parameters":{"height":{"value":40,"unit":"px"},"sizeMode":"contentWidth","backgroundColor":"Primary","iconIconSource":{"class":"material-icons","code":"home"},"iconSpacing":{"value":8,"unit":"px"},"borderRadius":{"value":4,"unit":"px"},"textStyle":"Label Medium","paddingTop":{"value":0,"unit":"px"},"paddingLeft":{"value":24,"unit":"px"},"paddingRight":{"value":24,"unit":"px"},"paddingBottom":{"value":0,"unit":"px"},"color":"#FFFFFF","minWidth":{"value":80,"unit":"px"},"useIcon":false,"iconSize":{"value":20,"unit":"px"},"cssClassName":"view-l2","label":"Level 2"},"stateParamaters":{"hover":{"backgroundColor":"Primary Dark"},"pressed":{"backgroundColor":"Primary","color":"White"},"disabled":{"backgroundColor":"Grey - 300","color":"Grey - 600"}},"stateTransitions":{},"defaultStateTransitions":{"neutral":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"hover":{"curve":[0,0,0.58,1],"dur":0,"delay":0},"pressed":{"curve":[0,0,0.58,1],"dur":0,"delay":0}}}]}